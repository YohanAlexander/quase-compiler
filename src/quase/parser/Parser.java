/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.parser;

import quase.lexer.*;
import quase.node.*;
import quase.analysis.*;
import java.util.*;

import java.io.*;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        if(!stack.hasNext())
        {
            stack.add(new State(numstate, listNode));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = listNode;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
              case SHIFT:
              {
                ArrayList nodeList = new ArrayList(1);
                nodeList.add(lexer.next());
                push(action[1], nodeList);
                last_shift = action[1];
                break;
              }
              case REDUCE:
              {
                switch(action[1])
                {
                  case 0:
                  {
                    ArrayList nodeList = new0();
                    push(goTo(0), nodeList);
                    break;
                  }
                  case 1:
                  {
                    ArrayList nodeList = new1();
                    push(goTo(0), nodeList);
                    break;
                  }
                  case 2:
                  {
                    ArrayList nodeList = new2();
                    push(goTo(1), nodeList);
                    break;
                  }
                  case 3:
                  {
                    ArrayList nodeList = new3();
                    push(goTo(1), nodeList);
                    break;
                  }
                  case 4:
                  {
                    ArrayList nodeList = new4();
                    push(goTo(2), nodeList);
                    break;
                  }
                  case 5:
                  {
                    ArrayList nodeList = new5();
                    push(goTo(2), nodeList);
                    break;
                  }
                  case 6:
                  {
                    ArrayList nodeList = new6();
                    push(goTo(3), nodeList);
                    break;
                  }
                  case 7:
                  {
                    ArrayList nodeList = new7();
                    push(goTo(4), nodeList);
                    break;
                  }
                  case 8:
                  {
                    ArrayList nodeList = new8();
                    push(goTo(5), nodeList);
                    break;
                  }
                  case 9:
                  {
                    ArrayList nodeList = new9();
                    push(goTo(6), nodeList);
                    break;
                  }
                  case 10:
                  {
                    ArrayList nodeList = new10();
                    push(goTo(6), nodeList);
                    break;
                  }
                  case 11:
                  {
                    ArrayList nodeList = new11();
                    push(goTo(7), nodeList);
                    break;
                  }
                  case 12:
                  {
                    ArrayList nodeList = new12();
                    push(goTo(7), nodeList);
                    break;
                  }
                  case 13:
                  {
                    ArrayList nodeList = new13();
                    push(goTo(8), nodeList);
                    break;
                  }
                  case 14:
                  {
                    ArrayList nodeList = new14();
                    push(goTo(8), nodeList);
                    break;
                  }
                  case 15:
                  {
                    ArrayList nodeList = new15();
                    push(goTo(8), nodeList);
                    break;
                  }
                  case 16:
                  {
                    ArrayList nodeList = new16();
                    push(goTo(9), nodeList);
                    break;
                  }
                  case 17:
                  {
                    ArrayList nodeList = new17();
                    push(goTo(10), nodeList);
                    break;
                  }
                  case 18:
                  {
                    ArrayList nodeList = new18();
                    push(goTo(11), nodeList);
                    break;
                  }
                  case 19:
                  {
                    ArrayList nodeList = new19();
                    push(goTo(12), nodeList);
                    break;
                  }
                  case 20:
                  {
                    ArrayList nodeList = new20();
                    push(goTo(13), nodeList);
                    break;
                  }
                  case 21:
                  {
                    ArrayList nodeList = new21();
                    push(goTo(13), nodeList);
                    break;
                  }
                  case 22:
                  {
                    ArrayList nodeList = new22();
                    push(goTo(14), nodeList);
                    break;
                  }
                  case 23:
                  {
                    ArrayList nodeList = new23();
                    push(goTo(14), nodeList);
                    break;
                  }
                  case 24:
                  {
                    ArrayList nodeList = new24();
                    push(goTo(15), nodeList);
                    break;
                  }
                  case 25:
                  {
                    ArrayList nodeList = new25();
                    push(goTo(15), nodeList);
                    break;
                  }
                  case 26:
                  {
                    ArrayList nodeList = new26();
                    push(goTo(16), nodeList);
                    break;
                  }
                  case 27:
                  {
                    ArrayList nodeList = new27();
                    push(goTo(16), nodeList);
                    break;
                  }
                  case 28:
                  {
                    ArrayList nodeList = new28();
                    push(goTo(16), nodeList);
                    break;
                  }
                  case 29:
                  {
                    ArrayList nodeList = new29();
                    push(goTo(17), nodeList);
                    break;
                  }
                  case 30:
                  {
                    ArrayList nodeList = new30();
                    push(goTo(18), nodeList);
                    break;
                  }
                  case 31:
                  {
                    ArrayList nodeList = new31();
                    push(goTo(18), nodeList);
                    break;
                  }
                  case 32:
                  {
                    ArrayList nodeList = new32();
                    push(goTo(19), nodeList);
                    break;
                  }
                  case 33:
                  {
                    ArrayList nodeList = new33();
                    push(goTo(19), nodeList);
                    break;
                  }
                  case 34:
                  {
                    ArrayList nodeList = new34();
                    push(goTo(20), nodeList);
                    break;
                  }
                  case 35:
                  {
                    ArrayList nodeList = new35();
                    push(goTo(21), nodeList);
                    break;
                  }
                  case 36:
                  {
                    ArrayList nodeList = new36();
                    push(goTo(21), nodeList);
                    break;
                  }
                  case 37:
                  {
                    ArrayList nodeList = new37();
                    push(goTo(22), nodeList);
                    break;
                  }
                  case 38:
                  {
                    ArrayList nodeList = new38();
                    push(goTo(22), nodeList);
                    break;
                  }
                  case 39:
                  {
                    ArrayList nodeList = new39();
                    push(goTo(23), nodeList);
                    break;
                  }
                  case 40:
                  {
                    ArrayList nodeList = new40();
                    push(goTo(24), nodeList);
                    break;
                  }
                  case 41:
                  {
                    ArrayList nodeList = new41();
                    push(goTo(24), nodeList);
                    break;
                  }
                  case 42:
                  {
                    ArrayList nodeList = new42();
                    push(goTo(24), nodeList);
                    break;
                  }
                  case 43:
                  {
                    ArrayList nodeList = new43();
                    push(goTo(24), nodeList);
                    break;
                  }
                  case 44:
                  {
                    ArrayList nodeList = new44();
                    push(goTo(24), nodeList);
                    break;
                  }
                  case 45:
                  {
                    ArrayList nodeList = new45();
                    push(goTo(24), nodeList);
                    break;
                  }
                  case 46:
                  {
                    ArrayList nodeList = new46();
                    push(goTo(25), nodeList);
                    break;
                  }
                  case 47:
                  {
                    ArrayList nodeList = new47();
                    push(goTo(25), nodeList);
                    break;
                  }
                  case 48:
                  {
                    ArrayList nodeList = new48();
                    push(goTo(25), nodeList);
                    break;
                  }
                  case 49:
                  {
                    ArrayList nodeList = new49();
                    push(goTo(25), nodeList);
                    break;
                  }
                  case 50:
                  {
                    ArrayList nodeList = new50();
                    push(goTo(25), nodeList);
                    break;
                  }
                  case 51:
                  {
                    ArrayList nodeList = new51();
                    push(goTo(25), nodeList);
                    break;
                  }
                  case 52:
                  {
                    ArrayList nodeList = new52();
                    push(goTo(25), nodeList);
                    break;
                  }
                  case 53:
                  {
                    ArrayList nodeList = new53();
                    push(goTo(26), nodeList);
                    break;
                  }
                  case 54:
                  {
                    ArrayList nodeList = new54();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 55:
                  {
                    ArrayList nodeList = new55();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 56:
                  {
                    ArrayList nodeList = new56();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 57:
                  {
                    ArrayList nodeList = new57();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 58:
                  {
                    ArrayList nodeList = new58();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 59:
                  {
                    ArrayList nodeList = new59();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 60:
                  {
                    ArrayList nodeList = new60();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 61:
                  {
                    ArrayList nodeList = new61();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 62:
                  {
                    ArrayList nodeList = new62();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 63:
                  {
                    ArrayList nodeList = new63();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 64:
                  {
                    ArrayList nodeList = new64();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 65:
                  {
                    ArrayList nodeList = new65();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 66:
                  {
                    ArrayList nodeList = new66();
                    push(goTo(27), nodeList);
                    break;
                  }
                  case 67:
                  {
                    ArrayList nodeList = new67();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 68:
                  {
                    ArrayList nodeList = new68();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 69:
                  {
                    ArrayList nodeList = new69();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 70:
                  {
                    ArrayList nodeList = new70();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 71:
                  {
                    ArrayList nodeList = new71();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 72:
                  {
                    ArrayList nodeList = new72();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 73:
                  {
                    ArrayList nodeList = new73();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 74:
                  {
                    ArrayList nodeList = new74();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 75:
                  {
                    ArrayList nodeList = new75();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 76:
                  {
                    ArrayList nodeList = new76();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 77:
                  {
                    ArrayList nodeList = new77();
                    push(goTo(28), nodeList);
                    break;
                  }
                  case 78:
                  {
                    ArrayList nodeList = new78();
                    push(goTo(29), nodeList);
                    break;
                  }
                  case 79:
                  {
                    ArrayList nodeList = new79();
                    push(goTo(29), nodeList);
                    break;
                  }
                  case 80:
                  {
                    ArrayList nodeList = new80();
                    push(goTo(29), nodeList);
                    break;
                  }
                  case 81:
                  {
                    ArrayList nodeList = new81();
                    push(goTo(29), nodeList);
                    break;
                  }
                  case 82:
                  {
                    ArrayList nodeList = new82();
                    push(goTo(29), nodeList);
                    break;
                  }
                  case 83:
                  {
                    ArrayList nodeList = new83();
                    push(goTo(29), nodeList);
                    break;
                  }
                  case 84:
                  {
                    ArrayList nodeList = new84();
                    push(goTo(30), nodeList);
                    break;
                  }
                  case 85:
                  {
                    ArrayList nodeList = new85();
                    push(goTo(31), nodeList);
                    break;
                  }
                  case 86:
                  {
                    ArrayList nodeList = new86();
                    push(goTo(31), nodeList);
                    break;
                  }
                  case 87:
                  {
                    ArrayList nodeList = new87();
                    push(goTo(32), nodeList);
                    break;
                  }
                  case 88:
                  {
                    ArrayList nodeList = new88();
                    push(goTo(33), nodeList);
                    break;
                  }
                  case 89:
                  {
                    ArrayList nodeList = new89();
                    push(goTo(33), nodeList);
                    break;
                  }
                  case 90:
                  {
                    ArrayList nodeList = new90();
                    push(goTo(33), nodeList);
                    break;
                  }
                  case 91:
                  {
                    ArrayList nodeList = new91();
                    push(goTo(34), nodeList);
                    break;
                  }
                }
                break;
              }
              case ACCEPT:
              {
                EOF node2 = (EOF) lexer.next();
                PPrograma node1 = (PPrograma) ((ArrayList)pop()).get(0);
                Start node = new Start(node1, node2);
                return node;
              }
              case ERROR:
                throw new ParserException(last_token,
                  "[" + last_line + "," + last_pos + "] " +
                  errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PListaRelacao plistarelacaoNode3 = (PListaRelacao)nodeArrayList1.get(0);
        TPontoVirgula tpontovirgulaNode4 = (TPontoVirgula)nodeArrayList2.get(0);
        AFamiliaFamilia pfamiliaNode2 = new AFamiliaFamilia (
              plistarelacaoNode3,
              tpontovirgulaNode4
        );
        PListaClasse plistaclasseNode5 = (PListaClasse)nodeArrayList3.get(0);
        APrograma pprogramaNode1 = new APrograma (
              pfamiliaNode2,
              plistaclasseNode5
        );
        nodeList.add(pprogramaNode1);
        return nodeList;
    }
    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        AVazioFamilia pfamiliaNode2 = new AVazioFamilia (
        );
        PListaClasse plistaclasseNode3 = (PListaClasse)nodeArrayList1.get(0);
        APrograma pprogramaNode1 = new APrograma (
              pfamiliaNode2,
              plistaclasseNode3
        );
        nodeList.add(pprogramaNode1);
        return nodeList;
    }
    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDefClasse pdefclasseNode2 = (PDefClasse)nodeArrayList1.get(0);
        PListaClasse plistaclasseNode3 = (PListaClasse)nodeArrayList2.get(0);
        AListaClasseListaClasse plistaclasseNode1 = new AListaClasseListaClasse (
              pdefclasseNode2,
              plistaclasseNode3
        );
        nodeList.add(plistaclasseNode1);
        return nodeList;
    }
    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TClasse tclasseNode2 = (TClasse)nodeArrayList1.get(0);
        AClasseListaClasse plistaclasseNode1 = new AClasseListaClasse (
              tclasseNode2
        );
        nodeList.add(plistaclasseNode1);
        return nodeList;
    }
    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PRelacao prelacaoNode2 = (PRelacao)nodeArrayList1.get(0);
        TEComercial tecomercialNode3 = (TEComercial)nodeArrayList2.get(0);
        AListaRelacaoListaRelacao plistarelacaoNode1 = new AListaRelacaoListaRelacao (
              prelacaoNode2,
              tecomercialNode3
        );
        nodeList.add(plistarelacaoNode1);
        return nodeList;
    }
    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PRelacao prelacaoNode2 = (PRelacao)nodeArrayList1.get(0);
        ARelacaoListaRelacao plistarelacaoNode1 = new ARelacaoListaRelacao (
              prelacaoNode2
        );
        nodeList.add(plistarelacaoNode1);
        return nodeList;
    }
    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TClasse tclasseNode2 = (TClasse)nodeArrayList1.get(0);
        TCid tcidNode3 = (TCid)nodeArrayList2.get(0);
        PFilhaRelacao pfilharelacaoNode4 = (PFilhaRelacao)nodeArrayList3.get(0);
        ARelacao prelacaoNode1 = new ARelacao (
              tclasseNode2,
              tcidNode3,
              pfilharelacaoNode4
        );
        nodeList.add(prelacaoNode1);
        return nodeList;
    }
    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TFilhaDaClasse tfilhadaclasseNode2 = (TFilhaDaClasse)nodeArrayList1.get(0);
        TCid tcidNode3 = (TCid)nodeArrayList2.get(0);
        AFilhaRelacao pfilharelacaoNode1 = new AFilhaRelacao (
              tfilhadaclasseNode2,
              tcidNode3
        );
        nodeList.add(pfilharelacaoNode1);
        return nodeList;
    }
    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TClasse tclasseNode2 = (TClasse)nodeArrayList1.get(0);
        TCid tcidNode3 = (TCid)nodeArrayList2.get(0);
        TComeca tcomecaNode4 = (TComeca)nodeArrayList3.get(0);
        PAtributos patributosNode5 = (PAtributos)nodeArrayList4.get(0);
        PMetodos pmetodosNode6 = (PMetodos)nodeArrayList5.get(0);
        TTermina tterminaNode7 = (TTermina)nodeArrayList6.get(0);
        ADefClasse pdefclasseNode1 = new ADefClasse (
              tclasseNode2,
              tcidNode3,
              tcomecaNode4,
              patributosNode5,
              pmetodosNode6,
              tterminaNode7
        );
        nodeList.add(pdefclasseNode1);
        return nodeList;
    }
    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDec pdecNode2 = (PDec)nodeArrayList1.get(0);
        PAtributos patributosNode3 = (PAtributos)nodeArrayList2.get(0);
        AAtributosAtributos patributosNode1 = new AAtributosAtributos (
              pdecNode2,
              patributosNode3
        );
        nodeList.add(patributosNode1);
        return nodeList;
    }
    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList(1);
        AVazioAtributos patributosNode1 = new AVazioAtributos (
        );
        nodeList.add(patributosNode1);
        return nodeList;
    }
    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDec2 pdec2Node2 = (PDec2)nodeArrayList1.get(0);
        PMetodos pmetodosNode3 = (PMetodos)nodeArrayList2.get(0);
        AMetodosMetodos pmetodosNode1 = new AMetodosMetodos (
              pdec2Node2,
              pmetodosNode3
        );
        nodeList.add(pmetodosNode1);
        return nodeList;
    }
    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList(1);
        AVazioMetodos pmetodosNode1 = new AVazioMetodos (
        );
        nodeList.add(pmetodosNode1);
        return nodeList;
    }
    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDecObj pdecobjNode2 = (PDecObj)nodeArrayList1.get(0);
        AObjDec pdecNode1 = new AObjDec (
              pdecobjNode2
        );
        nodeList.add(pdecNode1);
        return nodeList;
    }
    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDecVar pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);
        AVarDec pdecNode1 = new AVarDec (
              pdecvarNode2
        );
        nodeList.add(pdecNode1);
        return nodeList;
    }
    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDecCons pdecconsNode2 = (PDecCons)nodeArrayList1.get(0);
        AConsDec pdecNode1 = new AConsDec (
              pdecconsNode2
        );
        nodeList.add(pdecNode1);
        return nodeList;
    }
    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TObjeto tobjetoNode2 = (TObjeto)nodeArrayList1.get(0);
        TCid tcidNode3 = (TCid)nodeArrayList2.get(0);
        PListaId plistaidNode4 = (PListaId)nodeArrayList3.get(0);
        TPontoVirgula tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);
        ADecObj pdecobjNode1 = new ADecObj (
              tobjetoNode2,
              tcidNode3,
              plistaidNode4,
              tpontovirgulaNode5
        );
        nodeList.add(pdecobjNode1);
        return nodeList;
    }
    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TVariavel tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);
        PTipo ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        PListaId plistaidNode4 = (PListaId)nodeArrayList3.get(0);
        TPontoVirgula tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);
        ADecVar pdecvarNode1 = new ADecVar (
              tvariavelNode2,
              ptipoNode3,
              plistaidNode4,
              tpontovirgulaNode5
        );
        nodeList.add(pdecvarNode1);
        return nodeList;
    }
    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TConstante tconstanteNode2 = (TConstante)nodeArrayList1.get(0);
        PTipoPrimitivo ptipoprimitivoNode3 = (PTipoPrimitivo)nodeArrayList2.get(0);
        PListaInicializacao plistainicializacaoNode4 = (PListaInicializacao)nodeArrayList3.get(0);
        ADecCons pdecconsNode1 = new ADecCons (
              tconstanteNode2,
              ptipoprimitivoNode3,
              plistainicializacaoNode4
        );
        nodeList.add(pdecconsNode1);
        return nodeList;
    }
    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TId tidNode2 = (TId)nodeArrayList1.get(0);
        TInicializacao tinicializacaoNode3 = (TInicializacao)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AInicializacao pinicializacaoNode1 = new AInicializacao (
              tidNode2,
              tinicializacaoNode3,
              pexpNode4
        );
        nodeList.add(pinicializacaoNode1);
        return nodeList;
    }
    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TId tidNode2 = (TId)nodeArrayList1.get(0);
        TVirgula tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        PListaId plistaidNode4 = (PListaId)nodeArrayList3.get(0);
        AListaIdListaId plistaidNode1 = new AListaIdListaId (
              tidNode2,
              tvirgulaNode3,
              plistaidNode4
        );
        nodeList.add(plistaidNode1);
        return nodeList;
    }
    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TId tidNode2 = (TId)nodeArrayList1.get(0);
        AIdListaId plistaidNode1 = new AIdListaId (
              tidNode2
        );
        nodeList.add(plistaidNode1);
        return nodeList;
    }
    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInicializacao pinicializacaoNode2 = (PInicializacao)nodeArrayList1.get(0);
        TVirgula tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        PListaInicializacao plistainicializacaoNode4 = (PListaInicializacao)nodeArrayList3.get(0);
        AListaInicializacaoListaInicializacao plistainicializacaoNode1 = new AListaInicializacaoListaInicializacao (
              pinicializacaoNode2,
              tvirgulaNode3,
              plistainicializacaoNode4
        );
        nodeList.add(plistainicializacaoNode1);
        return nodeList;
    }
    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInicializacao pinicializacaoNode2 = (PInicializacao)nodeArrayList1.get(0);
        AInicializacaoListaInicializacao plistainicializacaoNode1 = new AInicializacaoListaInicializacao (
              pinicializacaoNode2
        );
        nodeList.add(plistainicializacaoNode1);
        return nodeList;
    }
    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTipoClasse ptipoclasseNode2 = (PTipoClasse)nodeArrayList1.get(0);
        AClasseTipo ptipoNode1 = new AClasseTipo (
              ptipoclasseNode2
        );
        nodeList.add(ptipoNode1);
        return nodeList;
    }
    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTipoPrimitivo ptipoprimitivoNode2 = (PTipoPrimitivo)nodeArrayList1.get(0);
        APrimitivoTipo ptipoNode1 = new APrimitivoTipo (
              ptipoprimitivoNode2
        );
        nodeList.add(ptipoNode1);
        return nodeList;
    }
    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TInt tintNode2 = (TInt)nodeArrayList1.get(0);
        AIntTipoPrimitivo ptipoprimitivoNode1 = new AIntTipoPrimitivo (
              tintNode2
        );
        nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }
    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TBool tboolNode2 = (TBool)nodeArrayList1.get(0);
        ABoolTipoPrimitivo ptipoprimitivoNode1 = new ABoolTipoPrimitivo (
              tboolNode2
        );
        nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }
    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TReal trealNode2 = (TReal)nodeArrayList1.get(0);
        ARealTipoPrimitivo ptipoprimitivoNode1 = new ARealTipoPrimitivo (
              trealNode2
        );
        nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }
    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TCid tcidNode2 = (TCid)nodeArrayList1.get(0);
        ATipoClasse ptipoclasseNode1 = new ATipoClasse (
              tcidNode2
        );
        nodeList.add(ptipoclasseNode1);
        return nodeList;
    }
    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDecProcedimento pdecprocedimentoNode2 = (PDecProcedimento)nodeArrayList1.get(0);
        AProcDec2 pdec2Node1 = new AProcDec2 (
              pdecprocedimentoNode2
        );
        nodeList.add(pdec2Node1);
        return nodeList;
    }
    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDecFuncao pdecfuncaoNode2 = (PDecFuncao)nodeArrayList1.get(0);
        AFuncDec2 pdec2Node1 = new AFuncDec2 (
              pdecfuncaoNode2
        );
        nodeList.add(pdec2Node1);
        return nodeList;
    }
    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TProcedimento tprocedimentoNode3 = (TProcedimento)nodeArrayList1.get(0);
        TId tidNode4 = (TId)nodeArrayList2.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode5 = (TParentesesEsquerdo)nodeArrayList3.get(0);
        PParametros pparametrosNode6 = (PParametros)nodeArrayList4.get(0);
        TParentesesDireito tparentesesdireitoNode7 = (TParentesesDireito)nodeArrayList5.get(0);
        PComando pcomandoNode8 = (PComando)nodeArrayList6.get(0);
        ADecProcedimento pdecprocedimentoNode1 = new ADecProcedimento (
              null,
              tprocedimentoNode3,
              tidNode4,
              tparentesesesquerdoNode5,
              pparametrosNode6,
              tparentesesdireitoNode7,
              pcomandoNode8
        );
        nodeList.add(pdecprocedimentoNode1);
        return nodeList;
    }
    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TPontoDeEntrada tpontodeentradaNode2 = (TPontoDeEntrada)nodeArrayList1.get(0);
        TProcedimento tprocedimentoNode3 = (TProcedimento)nodeArrayList2.get(0);
        TId tidNode4 = (TId)nodeArrayList3.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode5 = (TParentesesEsquerdo)nodeArrayList4.get(0);
        PParametros pparametrosNode6 = (PParametros)nodeArrayList5.get(0);
        TParentesesDireito tparentesesdireitoNode7 = (TParentesesDireito)nodeArrayList6.get(0);
        PComando pcomandoNode8 = (PComando)nodeArrayList7.get(0);
        ADecProcedimento pdecprocedimentoNode1 = new ADecProcedimento (
              tpontodeentradaNode2,
              tprocedimentoNode3,
              tidNode4,
              tparentesesesquerdoNode5,
              pparametrosNode6,
              tparentesesdireitoNode7,
              pcomandoNode8
        );
        nodeList.add(pdecprocedimentoNode1);
        return nodeList;
    }
    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TFuncao tfuncaoNode2 = (TFuncao)nodeArrayList1.get(0);
        PTipo ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        TId tidNode4 = (TId)nodeArrayList3.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode5 = (TParentesesEsquerdo)nodeArrayList4.get(0);
        PParametros pparametrosNode6 = (PParametros)nodeArrayList5.get(0);
        TParentesesDireito tparentesesdireitoNode7 = (TParentesesDireito)nodeArrayList6.get(0);
        PExp pexpNode8 = (PExp)nodeArrayList7.get(0);
        ADecFuncao pdecfuncaoNode1 = new ADecFuncao (
              tfuncaoNode2,
              ptipoNode3,
              tidNode4,
              tparentesesesquerdoNode5,
              pparametrosNode6,
              tparentesesdireitoNode7,
              pexpNode8
        );
        nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }
    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PListaParametro plistaparametroNode2 = (PListaParametro)nodeArrayList1.get(0);
        AParametrosParametros pparametrosNode1 = new AParametrosParametros (
              plistaparametroNode2
        );
        nodeList.add(pparametrosNode1);
        return nodeList;
    }
    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList(1);
        AVazioParametros pparametrosNode1 = new AVazioParametros (
        );
        nodeList.add(pparametrosNode1);
        return nodeList;
    }
    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PParametro pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        TVirgula tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        PListaParametro plistaparametroNode4 = (PListaParametro)nodeArrayList3.get(0);
        AListaParametroListaParametro plistaparametroNode1 = new AListaParametroListaParametro (
              pparametroNode2,
              tvirgulaNode3,
              plistaparametroNode4
        );
        nodeList.add(plistaparametroNode1);
        return nodeList;
    }
    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PParametro pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        AParametroListaParametro plistaparametroNode1 = new AParametroListaParametro (
              pparametroNode2
        );
        nodeList.add(plistaparametroNode1);
        return nodeList;
    }
    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTipo ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        TId tidNode3 = (TId)nodeArrayList2.get(0);
        AParametro pparametroNode1 = new AParametro (
              ptipoNode2,
              tidNode3
        );
        nodeList.add(pparametroNode1);
        return nodeList;
    }
    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSe tseNode2 = (TSe)nodeArrayList1.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode3 = (TParentesesEsquerdo)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        TParentesesDireito tparentesesdireitoNode5 = (TParentesesDireito)nodeArrayList4.get(0);
        PComando pcomandoNode6 = (PComando)nodeArrayList5.get(0);
        ACondComando pcomandoNode1 = new ACondComando (
              tseNode2,
              tparentesesesquerdoNode3,
              pexpNode4,
              tparentesesdireitoNode5,
              pcomandoNode6
        );
        nodeList.add(pcomandoNode1);
        return nodeList;
    }
    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TEnquanto tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode3 = (TParentesesEsquerdo)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        TParentesesDireito tparentesesdireitoNode5 = (TParentesesDireito)nodeArrayList4.get(0);
        PComando pcomandoNode6 = (PComando)nodeArrayList5.get(0);
        ALoopComando pcomandoNode1 = new ALoopComando (
              tenquantoNode2,
              tparentesesesquerdoNode3,
              pexpNode4,
              tparentesesdireitoNode5,
              pcomandoNode6
        );
        nodeList.add(pcomandoNode1);
        return nodeList;
    }
    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TId tidNode2 = (TId)nodeArrayList1.get(0);
        TAtribuicao tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        TPontoVirgula tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);
        AAtribComando pcomandoNode1 = new AAtribComando (
              tidNode2,
              tatribuicaoNode3,
              pexpNode4,
              tpontovirgulaNode5
        );
        nodeList.add(pcomandoNode1);
        return nodeList;
    }
    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PChamada pchamadaNode2 = (PChamada)nodeArrayList1.get(0);
        TPontoVirgula tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);
        ACallComando pcomandoNode1 = new ACallComando (
              pchamadaNode2,
              tpontovirgulaNode3
        );
        nodeList.add(pcomandoNode1);
        return nodeList;
    }
    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TId tidNode2 = (TId)nodeArrayList1.get(0);
        TPonto tpontoNode3 = (TPonto)nodeArrayList2.get(0);
        PChamada pchamadaNode4 = (PChamada)nodeArrayList3.get(0);
        TPontoVirgula tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);
        ACallIdComando pcomandoNode1 = new ACallIdComando (
              tidNode2,
              tpontoNode3,
              pchamadaNode4,
              tpontovirgulaNode5
        );
        nodeList.add(pcomandoNode1);
        return nodeList;
    }
    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBloco pblocoNode2 = (PBloco)nodeArrayList1.get(0);
        ABlocoComando pcomandoNode1 = new ABlocoComando (
              pblocoNode2
        );
        nodeList.add(pcomandoNode1);
        return nodeList;
    }
    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSenao tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        TSe tseNode3 = (TSe)nodeArrayList2.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode4 = (TParentesesEsquerdo)nodeArrayList3.get(0);
        PExp pexpNode5 = (PExp)nodeArrayList4.get(0);
        TParentesesDireito tparentesesdireitoNode6 = (TParentesesDireito)nodeArrayList5.get(0);
        PComando pcomandoNode7 = (PComando)nodeArrayList6.get(0);
        ACondComandoSenao pcomandosenaoNode1 = new ACondComandoSenao (
              tsenaoNode2,
              tseNode3,
              tparentesesesquerdoNode4,
              pexpNode5,
              tparentesesdireitoNode6,
              pcomandoNode7
        );
        nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }
    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSenao tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        TSe tseNode3 = (TSe)nodeArrayList2.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode4 = (TParentesesEsquerdo)nodeArrayList3.get(0);
        PExp pexpNode5 = (PExp)nodeArrayList4.get(0);
        TParentesesDireito tparentesesdireitoNode6 = (TParentesesDireito)nodeArrayList5.get(0);
        PComando pcomandoNode7 = (PComando)nodeArrayList6.get(0);
        PComandoSenao pcomandosenaoNode8 = (PComandoSenao)nodeArrayList7.get(0);
        ACondSenaoComandoSenao pcomandosenaoNode1 = new ACondSenaoComandoSenao (
              tsenaoNode2,
              tseNode3,
              tparentesesesquerdoNode4,
              pexpNode5,
              tparentesesdireitoNode6,
              pcomandoNode7,
              pcomandosenaoNode8
        );
        nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }
    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSenao tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        TEnquanto tenquantoNode3 = (TEnquanto)nodeArrayList2.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode4 = (TParentesesEsquerdo)nodeArrayList3.get(0);
        PExp pexpNode5 = (PExp)nodeArrayList4.get(0);
        TParentesesDireito tparentesesdireitoNode6 = (TParentesesDireito)nodeArrayList5.get(0);
        PComando pcomandoNode7 = (PComando)nodeArrayList6.get(0);
        ALoopComandoSenao pcomandosenaoNode1 = new ALoopComandoSenao (
              tsenaoNode2,
              tenquantoNode3,
              tparentesesesquerdoNode4,
              pexpNode5,
              tparentesesdireitoNode6,
              pcomandoNode7
        );
        nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }
    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSenao tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        TId tidNode3 = (TId)nodeArrayList2.get(0);
        TAtribuicao tatribuicaoNode4 = (TAtribuicao)nodeArrayList3.get(0);
        PExp pexpNode5 = (PExp)nodeArrayList4.get(0);
        TPontoVirgula tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);
        AAtribComandoSenao pcomandosenaoNode1 = new AAtribComandoSenao (
              tsenaoNode2,
              tidNode3,
              tatribuicaoNode4,
              pexpNode5,
              tpontovirgulaNode6
        );
        nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }
    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSenao tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        PChamada pchamadaNode3 = (PChamada)nodeArrayList2.get(0);
        TPontoVirgula tpontovirgulaNode4 = (TPontoVirgula)nodeArrayList3.get(0);
        ACallComandoSenao pcomandosenaoNode1 = new ACallComandoSenao (
              tsenaoNode2,
              pchamadaNode3,
              tpontovirgulaNode4
        );
        nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }
    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSenao tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        TId tidNode3 = (TId)nodeArrayList2.get(0);
        TPonto tpontoNode4 = (TPonto)nodeArrayList3.get(0);
        PChamada pchamadaNode5 = (PChamada)nodeArrayList4.get(0);
        TPontoVirgula tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);
        ACallIdComandoSenao pcomandosenaoNode1 = new ACallIdComandoSenao (
              tsenaoNode2,
              tidNode3,
              tpontoNode4,
              pchamadaNode5,
              tpontovirgulaNode6
        );
        nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }
    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSenao tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        PBloco pblocoNode3 = (PBloco)nodeArrayList2.get(0);
        ABlocoComandoSenao pcomandosenaoNode1 = new ABlocoComandoSenao (
              tsenaoNode2,
              pblocoNode3
        );
        nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }
    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TComeca tcomecaNode2 = (TComeca)nodeArrayList1.get(0);
        PDec pdecNode3 = (PDec)nodeArrayList2.get(0);
        PComando pcomandoNode4 = (PComando)nodeArrayList3.get(0);
        TTermina tterminaNode5 = (TTermina)nodeArrayList4.get(0);
        ABloco pblocoNode1 = new ABloco (
              tcomecaNode2,
              pdecNode3,
              pcomandoNode4,
              tterminaNode5
        );
        nodeList.add(pblocoNode1);
        return nodeList;
    }
    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TSe tseNode2 = (TSe)nodeArrayList1.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode3 = (TParentesesEsquerdo)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        TParentesesDireito tparentesesdireitoNode5 = (TParentesesDireito)nodeArrayList4.get(0);
        TEntao tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        PCondExp2 pcondexp2Node7 = (PCondExp2)nodeArrayList6.get(0);
        ACondExp pexpNode1 = new ACondExp (
              tseNode2,
              tparentesesesquerdoNode3,
              pexpNode4,
              tparentesesdireitoNode5,
              tentaoNode6,
              pcondexp2Node7
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TAdicao tadicaoNode3 = (TAdicao)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        ASomaExp pexpNode1 = new ASomaExp (
              ptermoNode2,
              tadicaoNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TSubtracao tsubtracaoNode3 = (TSubtracao)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        ASubtExp pexpNode1 = new ASubtExp (
              ptermoNode2,
              tsubtracaoNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TMultiplicacao tmultiplicacaoNode3 = (TMultiplicacao)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AMultiExp pexpNode1 = new AMultiExp (
              ptermoNode2,
              tmultiplicacaoNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TDivisao tdivisaoNode3 = (TDivisao)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        ADivExp pexpNode1 = new ADivExp (
              ptermoNode2,
              tdivisaoNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TModulo tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AModExp pexpNode1 = new AModExp (
              ptermoNode2,
              tmoduloNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TIgualdade tigualdadeNode3 = (TIgualdade)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AIgualExp pexpNode1 = new AIgualExp (
              ptermoNode2,
              tigualdadeNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TMenorQue tmenorqueNode3 = (TMenorQue)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AMenorExp pexpNode1 = new AMenorExp (
              ptermoNode2,
              tmenorqueNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TNegacao tnegacaoNode2 = (TNegacao)nodeArrayList1.get(0);
        PExp pexpNode3 = (PExp)nodeArrayList2.get(0);
        ADifExp pexpNode1 = new ADifExp (
              tnegacaoNode2,
              pexpNode3
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TE teNode3 = (TE)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AAndExp pexpNode1 = new AAndExp (
              ptermoNode2,
              teNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TOu touNode3 = (TOu)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AOrExp pexpNode1 = new AOrExp (
              ptermoNode2,
              touNode3,
              pexpNode4
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBlocoExp pblocoexpNode2 = (PBlocoExp)nodeArrayList1.get(0);
        ABlocoExpExp pexpNode1 = new ABlocoExpExp (
              pblocoexpNode2
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        ATermoExp pexpNode1 = new ATermoExp (
              ptermoNode2
        );
        nodeList.add(pexpNode1);
        return nodeList;
    }
    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TAdicao tadicaoNode3 = (TAdicao)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        ASomaCondExp2 pcondexp2Node1 = new ASomaCondExp2 (
              ptermoNode2,
              tadicaoNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TSubtracao tsubtracaoNode3 = (TSubtracao)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        ASubtCondExp2 pcondexp2Node1 = new ASubtCondExp2 (
              ptermoNode2,
              tsubtracaoNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TMultiplicacao tmultiplicacaoNode3 = (TMultiplicacao)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        AMultiCondExp2 pcondexp2Node1 = new AMultiCondExp2 (
              ptermoNode2,
              tmultiplicacaoNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TDivisao tdivisaoNode3 = (TDivisao)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        ADivCondExp2 pcondexp2Node1 = new ADivCondExp2 (
              ptermoNode2,
              tdivisaoNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TModulo tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        AModCondExp2 pcondexp2Node1 = new AModCondExp2 (
              ptermoNode2,
              tmoduloNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TIgualdade tigualdadeNode3 = (TIgualdade)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        AIgualCondExp2 pcondexp2Node1 = new AIgualCondExp2 (
              ptermoNode2,
              tigualdadeNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TMenorQue tmenorqueNode3 = (TMenorQue)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        AMenorCondExp2 pcondexp2Node1 = new AMenorCondExp2 (
              ptermoNode2,
              tmenorqueNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TNegacao tnegacaoNode2 = (TNegacao)nodeArrayList1.get(0);
        PCondExp2 pcondexp2Node3 = (PCondExp2)nodeArrayList2.get(0);
        ADifCondExp2 pcondexp2Node1 = new ADifCondExp2 (
              tnegacaoNode2,
              pcondexp2Node3
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TE teNode3 = (TE)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        AAndCondExp2 pcondexp2Node1 = new AAndCondExp2 (
              ptermoNode2,
              teNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TOu touNode3 = (TOu)nodeArrayList2.get(0);
        PCondExp2 pcondexp2Node4 = (PCondExp2)nodeArrayList3.get(0);
        AOrCondExp2 pcondexp2Node1 = new AOrCondExp2 (
              ptermoNode2,
              touNode3,
              pcondexp2Node4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTermo ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        TSenao tsenaoNode3 = (TSenao)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        AFimCondExp2 pcondexp2Node1 = new AFimCondExp2 (
              ptermoNode2,
              tsenaoNode3,
              pexpNode4
        );
        nodeList.add(pcondexp2Node1);
        return nodeList;
    }
    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TNumeroInteiro tnumerointeiroNode2 = (TNumeroInteiro)nodeArrayList1.get(0);
        AInteiroTermo ptermoNode1 = new AInteiroTermo (
              tnumerointeiroNode2
        );
        nodeList.add(ptermoNode1);
        return nodeList;
    }
    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TNumeroReal tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);
        ARealTermo ptermoNode1 = new ARealTermo (
              tnumerorealNode2
        );
        nodeList.add(ptermoNode1);
        return nodeList;
    }
    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TTrue ttrueNode2 = (TTrue)nodeArrayList1.get(0);
        ATrueTermo ptermoNode1 = new ATrueTermo (
              ttrueNode2
        );
        nodeList.add(ptermoNode1);
        return nodeList;
    }
    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TFalse tfalseNode2 = (TFalse)nodeArrayList1.get(0);
        AFalseTermo ptermoNode1 = new AFalseTermo (
              tfalseNode2
        );
        nodeList.add(ptermoNode1);
        return nodeList;
    }
    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TId tidNode2 = (TId)nodeArrayList1.get(0);
        AIdTermo ptermoNode1 = new AIdTermo (
              tidNode2
        );
        nodeList.add(ptermoNode1);
        return nodeList;
    }
    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TParentesesEsquerdo tparentesesesquerdoNode2 = (TParentesesEsquerdo)nodeArrayList1.get(0);
        PExp pexpNode3 = (PExp)nodeArrayList2.get(0);
        TParentesesDireito tparentesesdireitoNode4 = (TParentesesDireito)nodeArrayList3.get(0);
        AParTermo ptermoNode1 = new AParTermo (
              tparentesesesquerdoNode2,
              pexpNode3,
              tparentesesdireitoNode4
        );
        nodeList.add(ptermoNode1);
        return nodeList;
    }
    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TComeca tcomecaNode2 = (TComeca)nodeArrayList1.get(0);
        PListaDecCons plistadecconsNode3 = (PListaDecCons)nodeArrayList2.get(0);
        PExp pexpNode4 = (PExp)nodeArrayList3.get(0);
        TTermina tterminaNode5 = (TTermina)nodeArrayList4.get(0);
        ABlocoExp pblocoexpNode1 = new ABlocoExp (
              tcomecaNode2,
              plistadecconsNode3,
              pexpNode4,
              tterminaNode5
        );
        nodeList.add(pblocoexpNode1);
        return nodeList;
    }
    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDecCons pdecconsNode2 = (PDecCons)nodeArrayList1.get(0);
        PListaDecCons plistadecconsNode3 = (PListaDecCons)nodeArrayList2.get(0);
        AListaDecConsListaDecCons plistadecconsNode1 = new AListaDecConsListaDecCons (
              pdecconsNode2,
              plistadecconsNode3
        );
        nodeList.add(plistadecconsNode1);
        return nodeList;
    }
    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDecCons pdecconsNode2 = (PDecCons)nodeArrayList1.get(0);
        ADecConsListaDecCons plistadecconsNode1 = new ADecConsListaDecCons (
              pdecconsNode2
        );
        nodeList.add(plistadecconsNode1);
        return nodeList;
    }
    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TId tidNode2 = (TId)nodeArrayList1.get(0);
        TParentesesEsquerdo tparentesesesquerdoNode3 = (TParentesesEsquerdo)nodeArrayList2.get(0);
        PListaExp plistaexpNode4 = (PListaExp)nodeArrayList3.get(0);
        TParentesesDireito tparentesesdireitoNode5 = (TParentesesDireito)nodeArrayList4.get(0);
        AChamada pchamadaNode1 = new AChamada (
              tidNode2,
              tparentesesesquerdoNode3,
              plistaexpNode4,
              tparentesesdireitoNode5
        );
        nodeList.add(pchamadaNode1);
        return nodeList;
    }
    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode2 = (PExp)nodeArrayList1.get(0);
        TVirgula tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        PListaExp plistaexpNode4 = (PListaExp)nodeArrayList3.get(0);
        AListaExpListaExp plistaexpNode1 = new AListaExpListaExp (
              pexpNode2,
              tvirgulaNode3,
              plistaexpNode4
        );
        nodeList.add(plistaexpNode1);
        return nodeList;
    }
    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList(1);
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode2 = (PExp)nodeArrayList1.get(0);
        AExpListaExp plistaexpNode1 = new AExpListaExp (
              pexpNode2
        );
        nodeList.add(plistaexpNode1);
        return nodeList;
    }
    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList(1);
        AVazioListaExp plistaexpNode1 = new AVazioListaExp (
        );
        nodeList.add(plistaexpNode1);
        return nodeList;
    }
    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList(1);
        AVazioAtributo patributoNode1 = new AVazioAtributo (
        );
        nodeList.add(patributoNode1);
        return nodeList;
    }

    private static int[][][] actionTable; /* = {
      {
        {-1, 3, 0},
        {2, 0, 1},
      },
      {
        {-1, 1, 3},
        {38, 0, 7},
      },
      {
        {-1, 3, 2},
        {41, 2, -1},
      },
      {
        {-1, 1, 1},
      },
      {
        {-1, 3, 4},
        {1, 0, 8},
      },
      {
        {-1, 1, 5},
        {0, 0, 9},
      },
      {
        {-1, 3, 6},
        {2, 0, 10},
      },
      {
        {-1, 3, 7},
        {3, 0, 12},
        {4, 0, 13},
      },
      {
        {-1, 3, 8},
        {2, 0, 10},
      },
      {
        {-1, 1, 4},
      },
      {
        {-1, 1, 3},
        {38, 0, 16},
      },
      {
        {-1, 1, 2},
      },
      {
        {-1, 3, 12},
        {38, 0, 17},
      },
      {
        {-1, 1, 10},
        {6, 0, 18},
        {8, 0, 19},
        {9, 0, 20},
      },
      {
        {-1, 1, 6},
      },
      {
        {-1, 1, 0},
      },
      {
        {-1, 3, 16},
        {4, 0, 13},
      },
      {
        {-1, 1, 7},
      },
      {
        {-1, 3, 18},
        {38, 0, 26},
      },
      {
        {-1, 3, 19},
        {11, 0, 27},
        {12, 0, 28},
        {13, 0, 29},
        {38, 0, 30},
      },
      {
        {-1, 3, 20},
        {11, 0, 27},
        {12, 0, 28},
        {13, 0, 29},
      },
      {
        {-1, 1, 12},
        {14, 0, 35},
        {15, 0, 36},
        {18, 0, 37},
      },
      {
        {-1, 1, 10},
        {6, 0, 18},
        {8, 0, 19},
        {9, 0, 20},
      },
      {
        {-1, 1, 13},
      },
      {
        {-1, 1, 14},
      },
      {
        {-1, 1, 15},
      },
      {
        {-1, 3, 26},
        {37, 0, 43},
      },
      {
        {-1, 1, 26},
      },
      {
        {-1, 1, 27},
      },
      {
        {-1, 1, 28},
      },
      {
        {-1, 1, 29},
      },
      {
        {-1, 3, 31},
        {37, 0, 43},
      },
      {
        {-1, 1, 25},
      },
      {
        {-1, 1, 24},
      },
      {
        {-1, 3, 34},
        {37, 0, 46},
      },
      {
        {-1, 3, 35},
        {15, 0, 49},
      },
      {
        {-1, 3, 36},
        {37, 0, 50},
      },
      {
        {-1, 3, 37},
        {11, 0, 27},
        {12, 0, 28},
        {13, 0, 29},
        {38, 0, 30},
      },
      {
        {-1, 3, 38},
        {5, 0, 52},
      },
      {
        {-1, 1, 12},
        {14, 0, 35},
        {15, 0, 36},
        {18, 0, 37},
      },
      {
        {-1, 1, 30},
      },
      {
        {-1, 1, 31},
      },
      {
        {-1, 1, 9},
      },
      {
        {-1, 1, 21},
        {7, 0, 54},
      },
      {
        {-1, 3, 44},
        {1, 0, 55},
      },
      {
        {-1, 3, 45},
        {1, 0, 56},
      },
      {
        {-1, 3, 46},
        {10, 0, 57},
      },
      {
        {-1, 1, 23},
        {7, 0, 58},
      },
      {
        {-1, 1, 18},
      },
      {
        {-1, 3, 49},
        {37, 0, 59},
      },
      {
        {-1, 3, 50},
        {16, 0, 60},
      },
      {
        {-1, 3, 51},
        {37, 0, 61},
      },
      {
        {-1, 1, 8},
      },
      {
        {-1, 1, 11},
      },
      {
        {-1, 3, 54},
        {37, 0, 43},
      },
      {
        {-1, 1, 16},
      },
      {
        {-1, 1, 17},
      },
      {
        {-1, 3, 57},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 58},
        {37, 0, 46},
      },
      {
        {-1, 3, 59},
        {16, 0, 76},
      },
      {
        {-1, 1, 36},
        {11, 0, 27},
        {12, 0, 28},
        {13, 0, 29},
        {38, 0, 30},
      },
      {
        {-1, 3, 61},
        {16, 0, 81},
      },
      {
        {-1, 1, 20},
      },
      {
        {-1, 3, 63},
        {9, 0, 20},
      },
      {
        {-1, 3, 64},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 65},
        {16, 0, 85},
      },
      {
        {-1, 1, 80},
      },
      {
        {-1, 1, 81},
      },
      {
        {-1, 3, 68},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 1, 82},
      },
      {
        {-1, 1, 78},
      },
      {
        {-1, 1, 79},
      },
      {
        {-1, 1, 19},
      },
      {
        {-1, 1, 66},
        {26, 0, 87},
        {28, 0, 88},
        {29, 0, 89},
        {30, 0, 90},
        {31, 0, 91},
        {32, 0, 92},
        {33, 0, 93},
        {35, 0, 94},
        {36, 0, 95},
      },
      {
        {-1, 1, 65},
      },
      {
        {-1, 1, 22},
      },
      {
        {-1, 1, 36},
        {11, 0, 27},
        {12, 0, 28},
        {13, 0, 29},
        {38, 0, 30},
      },
      {
        {-1, 3, 77},
        {37, 0, 97},
      },
      {
        {-1, 3, 78},
        {17, 0, 98},
      },
      {
        {-1, 1, 35},
      },
      {
        {-1, 1, 38},
        {7, 0, 99},
      },
      {
        {-1, 1, 36},
        {11, 0, 27},
        {12, 0, 28},
        {13, 0, 29},
        {38, 0, 30},
      },
      {
        {-1, 1, 86},
        {9, 0, 20},
      },
      {
        {-1, 3, 83},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 84},
        {17, 0, 103},
      },
      {
        {-1, 3, 85},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 1, 62},
      },
      {
        {-1, 3, 87},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 88},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 89},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 90},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 91},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 92},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 93},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 94},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 95},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 96},
        {17, 0, 114},
      },
      {
        {-1, 1, 39},
      },
      {
        {-1, 3, 98},
        {4, 0, 115},
        {19, 0, 116},
        {21, 0, 117},
        {37, 0, 118},
      },
      {
        {-1, 3, 99},
        {11, 0, 27},
        {12, 0, 28},
        {13, 0, 29},
        {38, 0, 30},
      },
      {
        {-1, 3, 100},
        {17, 0, 123},
      },
      {
        {-1, 1, 85},
      },
      {
        {-1, 3, 102},
        {5, 0, 124},
      },
      {
        {-1, 1, 83},
      },
      {
        {-1, 3, 104},
        {17, 0, 125},
      },
      {
        {-1, 1, 56},
      },
      {
        {-1, 1, 55},
      },
      {
        {-1, 1, 57},
      },
      {
        {-1, 1, 58},
      },
      {
        {-1, 1, 59},
      },
      {
        {-1, 1, 60},
      },
      {
        {-1, 1, 61},
      },
      {
        {-1, 1, 63},
      },
      {
        {-1, 1, 64},
      },
      {
        {-1, 3, 114},
        {4, 0, 115},
        {19, 0, 116},
        {21, 0, 117},
        {37, 0, 118},
      },
      {
        {-1, 3, 115},
        {6, 0, 18},
        {8, 0, 19},
        {9, 0, 20},
      },
      {
        {-1, 3, 116},
        {16, 0, 128},
      },
      {
        {-1, 3, 117},
        {16, 0, 129},
      },
      {
        {-1, 3, 118},
        {16, 0, 130},
        {22, 0, 131},
        {23, 0, 132},
      },
      {
        {-1, 1, 32},
      },
      {
        {-1, 1, 45},
      },
      {
        {-1, 3, 121},
        {1, 0, 133},
      },
      {
        {-1, 1, 37},
      },
      {
        {-1, 3, 123},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 1, 84},
      },
      {
        {-1, 3, 125},
        {27, 0, 135},
      },
      {
        {-1, 1, 33},
      },
      {
        {-1, 3, 127},
        {4, 0, 115},
        {19, 0, 116},
        {21, 0, 117},
        {37, 0, 118},
      },
      {
        {-1, 3, 128},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 129},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 1, 90},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 131},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 132},
        {37, 0, 142},
      },
      {
        {-1, 1, 43},
      },
      {
        {-1, 1, 34},
      },
      {
        {-1, 3, 135},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 136},
        {5, 0, 147},
      },
      {
        {-1, 3, 137},
        {17, 0, 148},
      },
      {
        {-1, 3, 138},
        {17, 0, 149},
      },
      {
        {-1, 1, 89},
        {7, 0, 150},
      },
      {
        {-1, 3, 140},
        {17, 0, 151},
      },
      {
        {-1, 3, 141},
        {1, 0, 152},
      },
      {
        {-1, 3, 142},
        {16, 0, 130},
      },
      {
        {-1, 3, 143},
        {1, 0, 153},
      },
      {
        {-1, 3, 144},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 1, 54},
      },
      {
        {-1, 3, 146},
        {20, 0, 155},
        {26, 0, 156},
        {28, 0, 157},
        {29, 0, 158},
        {30, 0, 159},
        {31, 0, 160},
        {32, 0, 161},
        {33, 0, 162},
        {35, 0, 163},
        {36, 0, 164},
      },
      {
        {-1, 1, 53},
      },
      {
        {-1, 3, 148},
        {4, 0, 115},
        {19, 0, 116},
        {21, 0, 117},
        {37, 0, 118},
      },
      {
        {-1, 3, 149},
        {4, 0, 115},
        {19, 0, 116},
        {21, 0, 117},
        {37, 0, 118},
      },
      {
        {-1, 1, 90},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 1, 87},
      },
      {
        {-1, 1, 42},
      },
      {
        {-1, 1, 44},
      },
      {
        {-1, 1, 74},
      },
      {
        {-1, 3, 155},
        {4, 0, 63},
        {16, 0, 64},
        {19, 0, 65},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 68},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 156},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 157},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 158},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 159},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 160},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 161},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 162},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 163},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 3, 164},
        {16, 0, 64},
        {24, 0, 66},
        {25, 0, 67},
        {34, 0, 144},
        {37, 0, 69},
        {39, 0, 70},
        {40, 0, 71},
      },
      {
        {-1, 1, 40},
      },
      {
        {-1, 1, 41},
      },
      {
        {-1, 1, 88},
      },
      {
        {-1, 1, 77},
      },
      {
        {-1, 1, 68},
      },
      {
        {-1, 1, 67},
      },
      {
        {-1, 1, 69},
      },
      {
        {-1, 1, 70},
      },
      {
        {-1, 1, 71},
      },
      {
        {-1, 1, 72},
      },
      {
        {-1, 1, 73},
      },
      {
        {-1, 1, 75},
      },
      {
        {-1, 1, 76},
      },
    }; */

    private static int[][][] gotoTable; /* = {
      {
        {-1, 2},
      },
      {
        {-1, 3},
        {6, 11},
        {8, 15},
      },
      {
        {-1, 4},
      },
      {
        {-1, 5},
      },
      {
        {-1, 14},
      },
      {
        {-1, 6},
      },
      {
        {-1, 21},
        {22, 42},
      },
      {
        {-1, 38},
        {39, 53},
      },
      {
        {-1, 22},
        {115, 127},
      },
      {
        {-1, 23},
      },
      {
        {-1, 24},
      },
      {
        {-1, 25},
        {63, 82},
        {82, 82},
      },
      {
        {-1, 47},
      },
      {
        {-1, 44},
        {31, 45},
        {54, 62},
      },
      {
        {-1, 48},
        {58, 75},
      },
      {
        {-1, 77},
        {19, 31},
        {37, 51},
      },
      {
        {-1, 32},
        {20, 34},
      },
      {
        {-1, 33},
      },
      {
        {-1, 39},
      },
      {
        {-1, 40},
      },
      {
        {-1, 41},
      },
      {
        {-1, 78},
        {76, 96},
        {81, 100},
      },
      {
        {-1, 79},
        {99, 122},
      },
      {
        {-1, 80},
      },
      {
        {-1, 119},
        {114, 126},
        {127, 136},
        {148, 165},
        {149, 166},
      },
      {
        {-1, -1},
      },
      {
        {-1, 120},
      },
      {
        {-1, 139},
        {57, 72},
        {64, 84},
        {68, 86},
        {83, 102},
        {85, 104},
        {87, 105},
        {88, 106},
        {89, 107},
        {90, 108},
        {91, 109},
        {92, 110},
        {93, 111},
        {94, 112},
        {95, 113},
        {123, 134},
        {128, 137},
        {129, 138},
        {131, 141},
        {155, 168},
      },
      {
        {-1, 145},
        {144, 154},
        {156, 169},
        {157, 170},
        {158, 171},
        {159, 172},
        {160, 173},
        {161, 174},
        {162, 175},
        {163, 176},
        {164, 177},
      },
      {
        {-1, 73},
        {135, 146},
        {144, 146},
        {156, 146},
        {157, 146},
        {158, 146},
        {159, 146},
        {160, 146},
        {161, 146},
        {162, 146},
        {163, 146},
        {164, 146},
      },
      {
        {-1, 74},
      },
      {
        {-1, 83},
        {82, 101},
      },
      {
        {-1, 121},
        {132, 143},
      },
      {
        {-1, 140},
        {150, 167},
      },
      {
        {-1, -1},
      },
    };
    */
    private static String[] errorMessages; /* = {
      "expecting: 'classe'",
      "expecting: cid, EOF",
      "expecting: EOF",
      "expecting: ';'",
      "expecting: '&', ';'",
      "expecting: 'filha da classe', 'come\u00e7a'",
      "expecting: cid",
      "expecting: 'termina', 'objeto', 'var', 'cons', '=>', 'procedimento', 'fun\u00e7\u00e3o'",
      "expecting: 'come\u00e7a'",
      "expecting: 'int', 'bool', 'real', cid",
      "expecting: 'int', 'bool', 'real'",
      "expecting: 'termina', '=>', 'procedimento', 'fun\u00e7\u00e3o'",
      "expecting: 'come\u00e7a', 'termina', 'objeto', 'var', 'cons', '=>', 'procedimento', 'fun\u00e7\u00e3o', 'se', 'enquanto', id",
      "expecting: id",
      "expecting: 'procedimento'",
      "expecting: 'termina'",
      "expecting: ';', ','",
      "expecting: ':='",
      "expecting: 'come\u00e7a', 'termina', 'objeto', ',', 'var', 'cons', '=>', 'procedimento', '(', 'fun\u00e7\u00e3o', 'se', 'enquanto', 'true', 'false', '!', id, numero inteiro, numero real",
      "expecting: 'come\u00e7a', 'termina', 'objeto', 'var', 'cons', '=>', 'procedimento', '(', 'fun\u00e7\u00e3o', 'se', 'enquanto', 'true', 'false', '!', id, numero inteiro, numero real",
      "expecting: '('",
      "expecting: 'come\u00e7a', '(', 'se', 'true', 'false', '!', id, numero inteiro, numero real",
      "expecting: 'int', 'bool', 'real', ')', cid",
      "expecting: 'cons'",
      "expecting: ';', 'come\u00e7a', 'termina', 'objeto', ',', 'var', 'cons', '=>', 'procedimento', '(', ')', 'fun\u00e7\u00e3o', 'se', 'sen\u00e3o', 'enquanto', 'true', 'false', '-', '+', '*', '/', '%', '==', '<', '!', 'e', 'ou', id, numero inteiro, numero real",
      "expecting: ';', 'come\u00e7a', 'termina', 'objeto', ',', 'var', 'cons', '=>', 'procedimento', '(', ')', 'fun\u00e7\u00e3o', 'se', 'enquanto', 'true', 'false', '-', '+', '*', '/', '%', '==', '<', '!', 'e', 'ou', id, numero inteiro, numero real",
      "expecting: ';', 'come\u00e7a', 'termina', 'objeto', ',', 'var', 'cons', '=>', 'procedimento', '(', ')', 'fun\u00e7\u00e3o', 'se', 'enquanto', 'true', 'false', '!', id, numero inteiro, numero real",
      "expecting: ')'",
      "expecting: ',', ')'",
      "expecting: 'come\u00e7a', 'cons', '(', 'se', 'true', 'false', '!', id, numero inteiro, numero real",
      "expecting: 'come\u00e7a', 'se', 'enquanto', id",
      "expecting: 'objeto', 'var', 'cons'",
      "expecting: '(', '=', '.'",
      "expecting: 'ent\u00e3o'",
      "expecting: 'come\u00e7a', '(', ')', 'se', 'true', 'false', '!', id, numero inteiro, numero real",
      "expecting: '(', 'true', 'false', '!', id, numero inteiro, numero real",
      "expecting: 'sen\u00e3o', '-', '+', '*', '/', '%', '==', '<', 'e', 'ou'",
    };
    */
    private static int[] errors; /* = {
0, 1, 2, 2, 3, 4, 0, 5, 0, 3, 1, 2, 6, 7, 4, 2, 8, 4, 6, 9, 10, 11, 7, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 13, 9, 15, 11, 11, 11, 11, 16, 3, 3, 17, 18, 19, 13, 20, 13, 0, 15, 13, 12, 12, 21, 13, 20, 22, 20, 3, 23, 21, 20, 24, 24, 21, 24, 24, 24, 18, 25, 26, 19, 22, 13, 27, 27, 28, 22, 29, 21, 27, 21, 26, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 28, 30, 9, 27, 21, 15, 24, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 30, 31, 20, 20, 32, 11, 11, 3, 27, 21, 26, 33, 11, 30, 21, 21, 34, 21, 13, 11, 11, 35, 15, 27, 27, 28, 27, 3, 20, 3, 35, 26, 36, 11, 30, 30, 34, 3, 11, 11, 26, 21, 35, 35, 35, 35, 35, 35, 35, 35, 35, 11, 11, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 

    };
    */

    static
    {
        try
        {
            BufferedReader r = new BufferedReader (new InputStreamReader (
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = Integer.parseInt(r.readLine());
            actionTable = new int[length][][];
            for(int i = 0; i < actionTable.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                actionTable[i] = new int[length][3];
                for(int j = 0; j < actionTable[i].length; j++)
                {
                    for(int k = 0; k < 3; k++)
                    {
                        actionTable[i][j][k] = Integer.parseInt(r.readLine());
                    }
                }
            }

            // read gotoTable
            length = Integer.parseInt(r.readLine());
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    for(int k = 0; k < 2; k++)
                    {
                        gotoTable[i][j][k] = Integer.parseInt(r.readLine());
                    }
                }
            }

            // read errorMessages
            length = Integer.parseInt(r.readLine());
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                errorMessages[i] = unescape(r.readLine());
            }

            // read errors
            length = Integer.parseInt(r.readLine());
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = Integer.parseInt(r.readLine());
            }

            r.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }

    private static String unescape (String str)
    {
      StringBuffer out = new StringBuffer ();
      for ( int i = 0; i < str.length(); i++ )
        {
          char c = str.charAt(i);

          switch (c)
          {
            case '\\':
              if ( i + 1 < str.length() )
              {
                i++;
                switch (str.charAt(i))
                  {
                    case 'n':
                      out.append ("\n");
                      break;
                    case 'r':
                      out.append ("\r");
                      break;
                    case '"':
                      out.append ("\"");
                      break;
                    case '\\':
                      out.append ("\\");
                      break;
                    case '0':
                      if ( str.substring(i).startsWith ("000") )
                        {
                          out.append ("\000");
                          i += 2;
                        }
                      else
                        {
                          out.append ("\\");
                          out.append (str.charAt(i));
                        }
                      break;
                    case 'u':
                      String hstr = str.substring(i, i + 4);
                      if ( hstr.length() == 4 )
                        {
                          try
                          {
                            out.append ((char)Integer.parseInt(hstr, 16));
                            i += 4;
                          } catch (NumberFormatException ex)
                          {
                            out.append ("\\");
                            out.append (str.charAt(i));
                          }
                        }
                      else
                        {
                          out.append ("\\");
                          out.append (str.charAt(i));
                        }
                      break;
                    default:
                      out.append ("\\");
                      out.append (str.charAt(i));
                      break;
                  }
              }
              else
              {
                out.append (c);
              }

              break;
            default:
              out.append (c);
              break;
          }
        }
      return out.toString();
    }
}
