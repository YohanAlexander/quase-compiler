/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.node;

import quase.analysis.*;

@SuppressWarnings("nls")
public final class AChamadaChamada extends PChamada
{
    private TId _id_;
    private TParentesesEsquerdo _parentesesEsquerdo_;
    private PListaExp _listaExp_;
    private TParentesesDireito _parentesesDireito_;

    public AChamadaChamada()
    {
        // Constructor
    }

    public AChamadaChamada(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TParentesesEsquerdo _parentesesEsquerdo_,
        @SuppressWarnings("hiding") PListaExp _listaExp_,
        @SuppressWarnings("hiding") TParentesesDireito _parentesesDireito_)
    {
        // Constructor
        setId(_id_);

        setParentesesEsquerdo(_parentesesEsquerdo_);

        setListaExp(_listaExp_);

        setParentesesDireito(_parentesesDireito_);

    }

    @Override
    public Object clone()
    {
        return new AChamadaChamada(
            cloneNode(this._id_),
            cloneNode(this._parentesesEsquerdo_),
            cloneNode(this._listaExp_),
            cloneNode(this._parentesesDireito_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChamadaChamada(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TParentesesEsquerdo getParentesesEsquerdo()
    {
        return this._parentesesEsquerdo_;
    }

    public void setParentesesEsquerdo(TParentesesEsquerdo node)
    {
        if(this._parentesesEsquerdo_ != null)
        {
            this._parentesesEsquerdo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parentesesEsquerdo_ = node;
    }

    public PListaExp getListaExp()
    {
        return this._listaExp_;
    }

    public void setListaExp(PListaExp node)
    {
        if(this._listaExp_ != null)
        {
            this._listaExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listaExp_ = node;
    }

    public TParentesesDireito getParentesesDireito()
    {
        return this._parentesesDireito_;
    }

    public void setParentesesDireito(TParentesesDireito node)
    {
        if(this._parentesesDireito_ != null)
        {
            this._parentesesDireito_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parentesesDireito_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._parentesesEsquerdo_)
            + toString(this._listaExp_)
            + toString(this._parentesesDireito_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._parentesesEsquerdo_ == child)
        {
            this._parentesesEsquerdo_ = null;
            return;
        }

        if(this._listaExp_ == child)
        {
            this._listaExp_ = null;
            return;
        }

        if(this._parentesesDireito_ == child)
        {
            this._parentesesDireito_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._parentesesEsquerdo_ == oldChild)
        {
            setParentesesEsquerdo((TParentesesEsquerdo) newChild);
            return;
        }

        if(this._listaExp_ == oldChild)
        {
            setListaExp((PListaExp) newChild);
            return;
        }

        if(this._parentesesDireito_ == oldChild)
        {
            setParentesesDireito((TParentesesDireito) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
