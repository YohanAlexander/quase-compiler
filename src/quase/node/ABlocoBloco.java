/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.node;

import quase.analysis.*;

@SuppressWarnings("nls")
public final class ABlocoBloco extends PBloco
{
    private TComeca _comeca_;
    private PListaDecs _listaDecs_;
    private PListaComandos _listaComandos_;
    private TTermina _termina_;

    public ABlocoBloco()
    {
        // Constructor
    }

    public ABlocoBloco(
        @SuppressWarnings("hiding") TComeca _comeca_,
        @SuppressWarnings("hiding") PListaDecs _listaDecs_,
        @SuppressWarnings("hiding") PListaComandos _listaComandos_,
        @SuppressWarnings("hiding") TTermina _termina_)
    {
        // Constructor
        setComeca(_comeca_);

        setListaDecs(_listaDecs_);

        setListaComandos(_listaComandos_);

        setTermina(_termina_);

    }

    @Override
    public Object clone()
    {
        return new ABlocoBloco(
            cloneNode(this._comeca_),
            cloneNode(this._listaDecs_),
            cloneNode(this._listaComandos_),
            cloneNode(this._termina_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlocoBloco(this);
    }

    public TComeca getComeca()
    {
        return this._comeca_;
    }

    public void setComeca(TComeca node)
    {
        if(this._comeca_ != null)
        {
            this._comeca_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comeca_ = node;
    }

    public PListaDecs getListaDecs()
    {
        return this._listaDecs_;
    }

    public void setListaDecs(PListaDecs node)
    {
        if(this._listaDecs_ != null)
        {
            this._listaDecs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listaDecs_ = node;
    }

    public PListaComandos getListaComandos()
    {
        return this._listaComandos_;
    }

    public void setListaComandos(PListaComandos node)
    {
        if(this._listaComandos_ != null)
        {
            this._listaComandos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listaComandos_ = node;
    }

    public TTermina getTermina()
    {
        return this._termina_;
    }

    public void setTermina(TTermina node)
    {
        if(this._termina_ != null)
        {
            this._termina_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termina_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comeca_)
            + toString(this._listaDecs_)
            + toString(this._listaComandos_)
            + toString(this._termina_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comeca_ == child)
        {
            this._comeca_ = null;
            return;
        }

        if(this._listaDecs_ == child)
        {
            this._listaDecs_ = null;
            return;
        }

        if(this._listaComandos_ == child)
        {
            this._listaComandos_ = null;
            return;
        }

        if(this._termina_ == child)
        {
            this._termina_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comeca_ == oldChild)
        {
            setComeca((TComeca) newChild);
            return;
        }

        if(this._listaDecs_ == oldChild)
        {
            setListaDecs((PListaDecs) newChild);
            return;
        }

        if(this._listaComandos_ == oldChild)
        {
            setListaComandos((PListaComandos) newChild);
            return;
        }

        if(this._termina_ == oldChild)
        {
            setTermina((TTermina) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
