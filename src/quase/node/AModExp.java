/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.node;

import java.util.*;
import quase.analysis.*;

public final class AModExp extends PExp
{
    private PTermo _termo_;
    private TModulo _modulo_;
    private PExp _exp_;

    public AModExp ()
    {
    }

    public AModExp (
            PTermo _termo_,
            TModulo _modulo_,
            PExp _exp_
    )
    {
        setTermo (_termo_);
        setModulo (_modulo_);
        setExp (_exp_);
    }

    public Object clone()
    {
        return new AModExp (
            (PTermo)cloneNode (_termo_),
            (TModulo)cloneNode (_modulo_),
            (PExp)cloneNode (_exp_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModExp(this);
    }

    public PTermo getTermo ()
    {
        return _termo_;
    }

    public void setTermo (PTermo node)
    {
        if(_termo_ != null)
        {
            _termo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _termo_ = node;
    }
    public TModulo getModulo ()
    {
        return _modulo_;
    }

    public void setModulo (TModulo node)
    {
        if(_modulo_ != null)
        {
            _modulo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _modulo_ = node;
    }
    public PExp getExp ()
    {
        return _exp_;
    }

    public void setExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_termo_)
            + toString (_modulo_)
            + toString (_exp_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _termo_ == child )
        {
            _termo_ = null;
            return;
        }
        if ( _modulo_ == child )
        {
            _modulo_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _termo_ == oldChild )
        {
            setTermo ((PTermo) newChild);
            return;
        }
        if ( _modulo_ == oldChild )
        {
            setModulo ((TModulo) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            setExp ((PExp) newChild);
            return;
        }
    }

}
