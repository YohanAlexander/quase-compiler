Package quase;

Helpers
    letra_minuscula = ['a'..'z'] | [224..227] | 231 | 233 | 234 | 237 | [243..245] | 250;
    letra_maiuscula = ['A'..'Z'] | [192..195] | 199 | 201 | 202 | 205 | [211..213] | 218;
    letra = letra_minuscula | letra_maiuscula;
    digito = ['0'..'9'];
    inteiro_binario = '0b' ('0' | '1')+;
    inteiro_decimal = digito+;
    real_decimal = inteiro_decimal '.' inteiro_decimal;
    real_cientifico = ['1'..'9'] ('.' inteiro_decimal)? ('e' | 'E') '-'? inteiro_decimal;

Tokens
    e_comercial = '&';
    ponto_virgula = ';';
    classe = 'classe';
    filha_da_classe = 'filha da classe';
    comeca = 'começa';
    termina = 'termina';
    objeto = 'objeto';
    virgula = ',';
    variavel = 'var';
    constante = 'cons';
    inicializacao = ':=';
    int = 'int';
    bool = 'bool';
    real = 'real';
    ponto_de_entrada = '=>';
    procedimento = 'procedimento';
    parenteses_esquerdo = '(';
    parenteses_direito = ')';
    funcao = 'função';
    se = 'se';
    senao = 'senão';
    enquanto = 'enquanto';
    atribuicao = '=';
    ponto = '.';
    true = 'true';
    false = 'false';
    subtracao = '-';
    entao = 'então';
    adicao = '+';
    multiplicacao = '*';
    divisao = '/';
    modulo = '%';
    igualdade = '==';
    menor_que = '<';
    negacao = '!';
    e = 'e';
    ou = 'ou';

    comentario = '{' ([0..124] | 126 | 127)* '}';

    id = letra (letra | '_')*;
    cid = '_' (letra | '_')*;

    numero_inteiro = inteiro_binario | inteiro_decimal;
    numero_real = real_decimal | real_cientifico;

    vazio = (' ' | 9 | 10 | 13)+;

Ignored Tokens
    comentario, vazio;

Productions
    programa =
      {programa} familia lista_classe;

    lista_classe =
      {lista_classe} def_classe lista_classe |
      {classe} def_classe;

    familia =
      {familia} relacao lista_relacao ponto_virgula |
      {vazio} ;

    lista_relacao =
      {lista_relacao} e_comercial lista_relacao |
      {relacao} relacao;
    relacao =
      {relacao} classe cid filha_relacao;
    filha_relacao =
      {filha_relacao} filha_da_classe cid;

    def_classe =
      {def_classe} classe cid comeca atributos metodos termina;

    atributos =
      {atributos} dec atributos |
      {vazio} ;
    metodos =
      {metodos} dec2 metodos |
      {vazio} ;

    dec =
      {obj} dec_obj |
      {var} dec_var |
      {cons} dec_cons;
    dec_obj =
      {dec_obj} objeto cid lista_id ponto_virgula;
    dec_var =
      {dec_var} variavel tipo lista_id ponto_virgula;
    dec_cons =
      {dec_cons} constante tipo_primitivo lista_inicializacao;
    inicializacao =
      {inicializacao} id T.inicializacao exp;
    lista_id =
      {lista_id} id virgula lista_id |
      {id} id;
    lista_inicializacao =
      {lista_inicializacao} P.inicializacao virgula lista_inicializacao |
      {inicializacao} P.inicializacao;

    tipo =
      {classe} tipo_classe |
      {primitivo} tipo_primitivo;
    tipo_primitivo =
      {int} int |
      {bool} bool |
      {real} real;
    tipo_classe =
      {tipo_classe} cid;

    dec2 =
      {proc} dec_procedimento |
      {func} dec_funcao;
    dec_procedimento =
      {dec_procedimento} ponto_de_entrada? procedimento id parenteses_esquerdo parametros
        parenteses_direito comando;
    dec_funcao =
      {dec_funcao} funcao tipo id parenteses_esquerdo parametros parenteses_direito exp;
    parametros =
      {parametros} lista_parametro |
      {vazio} ;
    lista_parametro =
      {lista_parametro} parametro virgula lista_parametro |
      {parametro} parametro;
    parametro =
      {parametro} tipo id;

    comando =
      {cond} se parenteses_esquerdo exp parenteses_direito comando |
      {cond_senao} se parenteses_esquerdo exp parenteses_direito comando comando_senao |
      {call} chamada ponto_virgula |
      {loop} enquanto parenteses_esquerdo exp parenteses_direito comando |
      {atrib} id atribuicao exp ponto_virgula |
      {call_id} (id ponto)? chamada ponto_virgula |
      {bloco} bloco;

    comando_senao =
      {cond} senao se parenteses_esquerdo exp parenteses_direito comando |
      {cond_senao} senao se parenteses_esquerdo exp parenteses_direito comando comando_senao |
      {loop} senao enquanto parenteses_esquerdo exp parenteses_direito comando |
      {atrib} senao id atribuicao exp ponto_virgula |
      {call} senao chamada ponto_virgula |
      {call_id} senao (id ponto)? chamada ponto_virgula |
      {bloco} senao bloco;

    bloco =
      {bloco} comeca dec comando termina;

    exp =
      {id_chamada} (id ponto)? chamada ponto_virgula |
      {id_atributo} (id ponto)? atributo ponto_virgula |
      {exp_negativo} menor exp |
      {cond} se parenteses_esquerdo exp parenteses_direito entao cond_exp2 |
      {soma} termo adicao exp |
      {subt} termo subtracao exp |
      {multi} termo multiplicacao exp |
      {div} termo divisao exp |
      {mod} termo modulo exp |
      {igual} termo igualdade exp |
      {menor} termo menor_que exp |
      {dif} negacao exp |
      {and} termo e exp |
      {or} termo ou exp |
      {bloco_exp} bloco_exp |
      {termo} termo;

    cond_exp2 =
      {soma} termo adicao cond_exp2 |
      {subt} termo subtracao cond_exp2 |
      {multi} termo multiplicacao cond_exp2|
      {div} termo divisao cond_exp2 |
      {mod} termo modulo cond_exp2 |
      {igual} termo igualdade cond_exp2 |
      {menor} termo menor_que cond_exp2 |
      {dif} negacao cond_exp2 |
      {and} termo e cond_exp2 |
      {or} termo ou cond_exp2 |
      {fim} termo senao exp;

    termo =
      {inteiro} numero_inteiro |
      {real} numero_real |
      {true} true |
      {false} false |
      {id} id |
      {par} parenteses_esquerdo exp parenteses_direito;

    bloco_exp =
      {bloco_exp} comeca lista_dec_cons exp termina;
    lista_dec_cons =
      {lista_dec_cons} dec_cons lista_dec_cons |
      {dec_cons} dec_cons;

    chamada =
      {chamada} id parenteses_esquerdo lista_exp parenteses_direito;
    lista_exp =
      {lista_exp} exp virgula lista_exp |
      {exp} exp |
      {vazio} ;

    /* todo */
    atributo =
      {vazio} ;

