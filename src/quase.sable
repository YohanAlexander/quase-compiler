Package quase;

Helpers
    letra_minuscula = ['a'..'z'] | [224..227] | 231 | 233 | 234 | 237 | [243..245] | 250;
    letra_maiuscula = ['A'..'Z'] | [192..195] | 199 | 201 | 202 | 205 | [211..213] | 218;
    letra = letra_minuscula | letra_maiuscula;
    digito = ['0'..'9'];
    inteiro_binario = '0b' ('0' | '1')+;
    inteiro_decimal = digito+;
    real_decimal = inteiro_decimal '.' inteiro_decimal;
    real_cientifico = ['1'..'9'] ('.' inteiro_decimal)? ('e' | 'E') '-'? inteiro_decimal;
 
Tokens
    e_comercial = '&';
    ponto_virgula = ';';
    classe = 'classe';
    filha_da_classe = 'filha da classe';
    comeca = 'começa';
    termina = 'termina';
    objeto = 'objeto';
    virgula = ',';
    variavel = 'var';
    constante = 'cons';
    inicializacao = ':=';
    int = 'int';
    bool = 'bool';
    real = 'real';
    ponto_de_entrada = '=>';
    procedimento = 'procedimento';
    parenteses_esquerdo = '(';
    parenteses_direito = ')';
    funcao = 'função';
    se = 'se';
    senao = 'senão';
    enquanto = 'enquanto';
    atribuicao = '=';
    ponto = '.';
    true = 'true';
    false = 'false';
    subtracao = '-';
    entao = 'então';
    adicao = '+';
    multiplicacao = '*';
    divisao = '/';
    modulo = '%';
    igualdade = '==';
    menor_que = '<';
    negacao = '!';
    e = 'e';
    ou = 'ou';

    comentario = '{' ([0..124] | 126 | 127)* '}';

    id = letra (letra | '_')*;
    cid = '_' (letra | '_')*;

    numero_inteiro = inteiro_binario | inteiro_decimal;
    numero_real = real_decimal | real_cientifico;

    vazio = (' ' | 9 | 10 | 13)+;

Ignored Tokens
    comentario, vazio;

Productions
    programa = exp;
	
    exp =
      {cond} se parenteses_esquerdo exp parenteses_direito entao cond_exp2 |
      {soma} termo adicao exp |
      {subt} termo subtracao exp |
      {multi} termo multiplicacao exp |
      {div} termo divisao exp |
      {mod} termo modulo exp |
      {igual} termo igualdade exp |
      {menor} termo menor_que exp |
      {dif} negacao exp |
      {and} termo e exp |
      {or} termo ou exp |
      {termo} termo;

    cond_exp2 =
      {soma} termo adicao cond_exp2 |
      {subt} termo subtracao cond_exp2 |
      {multi} termo multiplicacao cond_exp2|
      {div} termo divisao cond_exp2 |
      {mod} termo modulo cond_exp2 |
      {igual} termo igualdade cond_exp2 |
      {menor} termo menor_que cond_exp2 |
      {dif} negacao cond_exp2 |
      {and} termo e cond_exp2 |
      {or} termo ou cond_exp2 |
      {fim} termo senao exp;
	  
    termo = 
      {inteiro} numero_inteiro |
      {real} numero_real |
      {true} true |
      {false} false |
      {id} id |
      {par} parenteses_esquerdo exp parenteses_direito;
