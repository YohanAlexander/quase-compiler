Package quase;

Helpers
    letra_minuscula = ['a'..'z'] | [224..227] | 231 | 233 | 234 | 237 | [243..245] | 250;
    letra_maiuscula = ['A'..'Z'] | [192..195] | 199 | 201 | 202 | 205 | [211..213] | 218;
    letra = letra_minuscula | letra_maiuscula;
    digito = ['0'..'9'];
    inteiro_binario = '0b' ('0' | '1')+;
    inteiro_decimal = digito+;
    real_decimal = inteiro_decimal '.' inteiro_decimal;
    real_cientifico = ['1'..'9'] ('.' inteiro_decimal)? ('e' | 'E') '-'? inteiro_decimal;

Tokens
    e_comercial = '&';
    ponto_virgula = ';';
    classe = 'classe';
    filha_da_classe = 'filha da classe';
    comeca = 'começa';
    termina = 'termina';
    objeto = 'objeto';
    virgula = ',';
    variavel = 'var';
    constante = 'cons';
    inicializacao = ':=';
    int = 'int';
    bool = 'bool';
    real = 'real';
    ponto_de_entrada = '=>';
    procedimento = 'procedimento';
    parenteses_esquerdo = '(';
    parenteses_direito = ')';
    funcao = 'função';
    se = 'se';
    senao = 'senão';
    enquanto = 'enquanto';
    atribuicao = '=';
    ponto = '.';
    true = 'true';
    false = 'false';
    subtracao = '-';
    entao = 'então';
    adicao = '+';
    multiplicacao = '*';
    divisao = '/';
    modulo = '%';
    igualdade = '==';
    menor_que = '<';
    negacao = '!';
    e = 'e';
    ou = 'ou';

    comentario = '{' ([0..124] | 126 | 127)* '}';

    id = letra (letra | '_')*;
    cid = '_' (letra | '_')*;

    numero_inteiro = inteiro_binario | inteiro_decimal;
    numero_real = real_decimal | real_cientifico;

    vazio = (' ' | 9 | 10 | 13)+;

Ignored Tokens
    comentario, vazio;

Productions
    programa {-> programa} =
      [esq]:familia? [dir]:lista_classe {-> New programa.a_programa(esq.familia, [dir.def_classe])};
    lista_classe {-> def_classe*} =
      {lista_classe} [esq]:def_classe [dir]:lista_classe {-> [esq.def_classe, dir.def_classe]} |
      {classe} def_classe {-> [def_classe]};

    familia {-> familia} =
      {familia} lista_relacao ponto_virgula {-> New familia.a_lista_relacao([lista_relacao.relacao])};
    lista_relacao {-> relacao*} =
      {lista_relacao} [esq]:relacao e_comercial [dir]:lista_relacao {-> [esq.relacao, dir.relacao]} |
      {relacao} relacao {-> [relacao]};
    relacao {-> relacao} =
      {relacao} classe cid filha_relacao {-> New relacao.a_relacao(filha_relacao)};
    filha_relacao =
      {filha_relacao} filha_da_classe cid;

    def_classe {-> def_classe} =
      {def_classe} classe [nome]:pcid comeca [esq]:atributos? [dir]:metodos? termina {-> New def_classe.a_def_classe(nome.pcid, [esq.dec], [dir.dec2])};

    atributos {-> dec*} =
      {atributos} [esq]:dec [dir]:atributos {-> [esq.dec, dir.dec]} |
      {dec} dec {-> [dec]};
    metodos {-> dec2*} =
      {metodos} [esq]:dec2 [dir]:metodos {-> [esq.dec2, dir.dec2]} |
      {dec} dec2 {-> [dec2]};

    dec {-> dec} =
      {obj} dec_obj {-> dec_obj.dec} |
      {var} dec_var {-> dec_var.dec} |
      {cons} dec_cons {-> dec_cons.dec};
    lista_decs {-> dec*} =
      {lista_dec} [esq]:dec [dir]:lista_decs {-> [esq.dec, dir.dec]} |
      {dec} dec {-> [dec]};
    lista_dec_cons {-> dec*} =
      {lista_dec_cons} [esq]:dec_cons [dir]:lista_dec_cons {-> [esq.dec, dir.dec]}|
      {dec_cons} dec_cons {-> [dec_cons.dec]};
    dec_obj {-> dec} =
      {dec_obj} objeto [esq]:pcid [dir]:lista_id ponto_virgula {-> New dec.a_dec_obj(esq.pcid, [dir.exp])};
    dec_var {-> dec} =
      {dec_var} variavel [esq]:tipo [dir]:lista_id ponto_virgula {-> New dec.a_dec_var(esq.tipo, [dir.exp])};
    dec_cons {-> dec} =
      {dec_cons} constante [esq]:tipo_primitivo [dir]:lista_inicializacao+ ponto_virgula {-> New dec.a_dec_cons(esq.tipo_primitivo, [dir.pinicializacao])};
    lista_id {-> exp*} =
      {lista_id} [esq]:pid virgula [dir]:lista_id {-> [esq.exp, dir.exp]} |
      {id} pid {-> [pid.exp]};
    lista_inicializacao {-> pinicializacao*} =
      {lista_inicializacao} [esq]:pinicializacao virgula [dir]:lista_inicializacao {-> [esq.pinicializacao, dir.pinicializacao]} |
      {inicializacao} pinicializacao {-> [pinicializacao]};
    pinicializacao {-> pinicializacao} =
      {pinicializacao} [esq]:pid inicializacao [dir]:exp {-> New pinicializacao.a_pinicializacao(esq.exp, dir.exp)};
    pcid =
      {cid} cid;

    dec2 {-> dec2} =
      {proc} dec_procedimento {-> dec_procedimento.dec2} |
      {func} dec_funcao {-> dec_funcao.dec2};
    dec_procedimento {-> dec2} =
      {dec_procedimento} ponto_de_entrada? procedimento [esq]:pid parenteses_esquerdo [mid]:lista_parametro? parenteses_direito [dir]:comando {-> New dec2.a_dec_procedimento(esq.exp, [mid.parametro], dir.comando)};
    dec_funcao {-> dec2} =
      {dec_funcao} funcao [esq]:tipo [esqn]:pid parenteses_esquerdo [mid]:lista_parametro? parenteses_direito [dir]:exp {-> New dec2.a_dec_funcao(esq.tipo, esqn.exp, [mid.parametro], dir.exp)};
    lista_parametro {-> parametro*} =
      {lista_parametro} [esq]:parametro virgula [dir]:lista_parametro {-> [esq.parametro, dir.parametro]} |
      {parametro} parametro {-> [parametro]};
    parametro =
      {parametro} tipo id;

    tipo {-> tipo} =
      {classe} tipo_classe {-> New tipo.a_tipo_classe(tipo_classe)} |
      {primitivo} tipo_primitivo {-> New tipo.a_tipo_primtivo(tipo_primitivo)};
    tipo_classe =
      {tipo_classe} cid;
    tipo_primitivo =
      {int} int |
      {bool} bool |
      {real} real;

    comando {-> comando} =
      {cond} se parenteses_esquerdo [esq]:exp parenteses_direito [dir]:comando {-> New comando.a_cond(esq.exp, dir.comando)} |
      {cond_else} se parenteses_esquerdo [esq]:exp parenteses_direito [mid]:comando_else senao [dir]:comando {-> New comando.a_cond_else(esq.exp, mid.comando, dir.comando)} |
      {loop} enquanto parenteses_esquerdo [esq]:exp parenteses_direito [dir]:comando {-> New comando.a_loop(esq.exp, dir.comando)} |
      {atrib} id atribuicao exp ponto_virgula {-> New comando.a_atrib(exp)} |
      {call} [esq]:id_ponto? [dir]:chamada ponto_virgula {-> New comando.a_call(esq.exp, dir.exp)} |
      {bloco} bloco {-> bloco.comando};
    comando_else {-> comando} =
      {cond} se parenteses_esquerdo [esq]:exp parenteses_direito [mid]:comando_else [dir]:cont_comando_else {-> New comando.a_cont_cond_else(esq.exp, mid.comando, dir.comando)} |
      {loop} enquanto parenteses_esquerdo [esq]:exp parenteses_direito [dir]:comando_else {-> New comando.a_loop_else(esq.exp, dir.comando)} |
      {atrib} id atribuicao exp ponto_virgula {-> New comando.a_atrib_else(exp)} |
      {call} [esq]:id_ponto? [dir]:chamada ponto_virgula {-> New comando.a_call_else(esq.exp, dir.exp)} |
      {bloco} bloco {-> bloco.comando};
    cont_comando_else {-> comando} =
      {cont_cond} senao comando_else {-> comando_else.comando};
    lista_comandos {-> comando*} =
      {lista_comandos} [esq]:comando [dir]:lista_comandos {-> [esq.comando, dir.comando]} |
      {comando} comando {-> [comando]};

    bloco {-> comando} =
      {bloco} comeca [esq]:lista_decs? [dir]:lista_comandos? termina {-> New comando.a_bloco([esq.dec], [dir.comando])};

    exp {-> exp} =
      {cond} se parenteses_esquerdo [esq]:exp parenteses_direito entao [dir]:cond_exp2 {-> New exp.a_se_cond(esq.exp, dir.exp)} |
      {negativo} subtracao exp {-> New exp.a_negativo(exp)} |
      {soma} [esq]:termo adicao [dir]:exp {-> New exp.a_soma(esq.exp, dir.exp)} |
      {subt} [esq]:termo subtracao [dir]:exp {-> New exp.a_subt(esq.exp, dir.exp)} |
      {multi} [esq]:termo multiplicacao [dir]:exp {-> New exp.a_multi(esq.exp, dir.exp)} |
      {div} [esq]:termo divisao [dir]:exp {-> New exp.a_div(esq.exp, dir.exp)} |
      {mod} [esq]:termo modulo [dir]:exp {-> New exp.a_mod(esq.exp, dir.exp)} |
      {igual} [esq]:termo igualdade [dir]:exp {-> New exp.a_igual(esq.exp, dir.exp)} |
      {menor} [esq]:termo menor_que [dir]:exp {-> New exp.a_menor(esq.exp, dir.exp)} |
      {dif} negacao exp {-> New exp.a_dif(exp)} |
      {and} [esq]:termo e [dir]:exp {-> New exp.a_and(esq.exp, dir.exp)} |
      {or} [esq]:termo ou [dir]:exp {-> New exp.a_or(esq.exp, dir.exp)} |
      {bloco_exp} bloco_exp {-> bloco_exp.exp} |
      {termo} termo {-> termo.exp};
    cond_exp2 {-> exp} =
      {cont_cond} [esq]:exp [dir]:cond_exp3 {-> New exp.a_entao_cond(esq.exp, dir.exp)};
    cond_exp3 {-> exp} =
      {fim_cond} senao exp {-> New exp.a_senao_cond(exp)};

    termo {-> exp} =
      {numero} numero {-> New exp.a_numero(numero)} |
      {booleano} booleano {-> New exp.a_booleano(booleano)} |
      {id_call} id_call {-> id_call.exp} |
      {par} parenteses_esquerdo exp parenteses_direito {-> exp.exp};

    numero =
      {inteiro} numero_inteiro |
      {real} numero_real;
    booleano =
      {true} true |
      {false} false;

    id_call {-> exp} =
      {id} pid {-> pid.exp} |
      {id_atrib} [esq]:id_ponto [dir]:pid {-> New exp.a_id_atrib(esq.exp, dir.exp)} |
      {id_call} [esq]:id_ponto? [dir]:chamada {-> New exp.a_id_call(esq.exp, dir.exp)};
    id_ponto {-> exp} =
      {id_ponto} pid ponto {-> pid.exp};

	pid {-> exp} =
	  {id} id {-> New exp.a_id(id)};

    bloco_exp {-> exp} =
      {bloco_exp} comeca [esq]:lista_dec_cons? [dir]:exp termina {-> New exp.a_bloco_exp([esq.dec], dir.exp)};

    chamada {-> exp} =
      {chamada} [esq]:pid parenteses_esquerdo [dir]:lista_exp? parenteses_direito {-> New exp.a_chamada(esq.exp, [dir.exp])};
    lista_exp {-> exp*} =
      {lista_exp} [esq]:exp virgula [dir]:lista_exp {-> [esq.exp, dir.exp]} |
      {exp} exp {-> [exp]};

Abstract Syntax Tree
    programa =
      {a_programa} [esq]:familia? [dir]:def_classe+;

    familia =
      {a_lista_relacao} relacao+;
    relacao =
      {a_relacao} filha_relacao;
    filha_relacao =
      {filha_relacao} filha_da_classe cid;

    def_classe =
      {a_def_classe} [nome]:pcid [esq]:dec* [dir]:dec2*;

    dec =
      {a_dec_obj} [esq]:pcid [dir]:exp+ |
      {a_dec_var} [esq]:tipo [dir]:exp+ |
      {a_dec_cons} [esq]:tipo_primitivo [dir]:pinicializacao+;
    pinicializacao =
      {a_pinicializacao} [esq]:exp [dir]:exp;
    pcid =
      {cid} cid;

    dec2 =
      {a_dec_procedimento} [esq]:exp [mid]:parametro* [dir]:comando |
      {a_dec_funcao} [esq]:tipo [esqn]:exp [mid]:parametro* [dir]:exp;
    parametro =
      {parametro} tipo id;

    tipo =
      {a_tipo_classe} tipo_classe |
      {a_tipo_primtivo} tipo_primitivo;
    tipo_classe =
      {tipo_classe} cid;
    tipo_primitivo =
      {int} int |
      {bool} bool |
      {real} real;

    comando =
      {a_cond} [esq]:exp [dir]:comando |
      {a_cond_else} [esq]:exp [mid]:comando [dir]:comando |
      {a_cont_cond_else} [esq]:exp [mid]:comando [dir]:comando |
      {a_loop} [esq]:exp [dir]:comando |
      {a_atrib} exp |
      {a_call} [esq]:exp? [dir]:exp |
      {a_bloco} [esq]:dec* [dir]:comando* |
      {a_loop_else} [esq]:exp [dir]:comando |
      {a_atrib_else} exp |
      {a_call_else} [esq]:exp? [dir]:exp;

	exp =
      {a_se_cond} [esq]:exp [dir]:exp |
      {a_entao_cond} [esq]:exp [dir]:exp |
      {a_senao_cond} exp |
      {a_soma} [esq]:exp [dir]:exp |
      {a_subt} [esq]:exp [dir]:exp |
      {a_multi} [esq]:exp [dir]:exp |
      {a_div} [esq]:exp [dir]:exp |
      {a_mod} [esq]:exp [dir]:exp |
      {a_igual} [esq]:exp [dir]:exp |
      {a_menor} [esq]:exp [dir]:exp |
      {a_bloco_exp} [esq]:dec* [dir]:exp |
      {a_negativo} exp |
      {a_dif} exp |
      {a_and} [esq]:exp [dir]:exp |
      {a_or} [esq]:exp [dir]:exp |
      {a_id} id |
      {a_id_atrib} [esq]:exp? [dir]:exp |
      {a_id_call} [esq]:exp? [dir]:exp |
      {a_chamada} [esq]:exp [dir]:exp* |
      {a_numero} numero |
      {a_booleano} booleano;
    id_ponto =
      {a_id_ponto} exp;

    numero =
      {inteiro} numero_inteiro |
      {real} numero_real;
    booleano =
      {true} true |
      {false} false;    
